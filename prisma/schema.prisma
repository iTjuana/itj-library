generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    transaction   Transaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
    idISBN       String   @id @default(cuid())
    isbn         String   
    title        String
    subtitle     String?   
    description  String?   
    language     Int
    authors      String?
    subjects     String?
    publishDates String?
    publishers     String?
    number_of_pages Int?
    image        String?
    inventary    Inventary[]
}

model Inventary {
    id           String   @id @default(cuid())
    book         Book     @relation(fields: [bookId], references: [idISBN], onDelete: Cascade)
    bookId       String
    status       Int   //Available, Unavailable, Borrowed, In Review, Expired
    format       Int   //Hardcover, Paperbacks, Ebooks, Magazine/Comic 
    condition    Int   //Like New, Good, Fair, Poor
    bookOwner    String
    dateAdded    DateTime @default(now())
    lastUpdate   DateTime @updatedAt
    transaction  Transaction[]
    @@index([bookId])
}

model Transaction {
  userId       String
  inventaryId  String
  borrowedDate DateTime
  dueDate      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventary    Inventary @relation(fields: [inventaryId], references: [id], onDelete: Cascade)

  @@id([userId, inventaryId])
  @@index([userId])
  @@index([inventaryId])
}
