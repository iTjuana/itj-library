generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../prisma-erd.png"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  transactions  Transaction[]
  notes         Note[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id            String      @id @default(cuid())
  isbn          String
  title         String
  subtitle      String?
  description   String?
  language      Int
  authors       String?
  subjects      String?
  publishDates  String?
  publishers    String?
  numberOfPages Int?
  image         String?
  inventory     Inventory[]
  userNotes     Note[]
}

model Inventory {
  id           String        @id @default(cuid())
  bookId       String
  status       Int
  format       Int
  condition    Int
  bookOwner    String
  tagId        String?
  ownerNote    String?
  isDonated    Boolean       @default(false)
  dateAdded    DateTime      @default(now())
  lastUpdate   DateTime      @updatedAt
  book         Book          @relation(fields: [bookId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([bookId])
}

model Transaction {
  id          String    @id @default(cuid())
  userId      String
  inventoryId String
  status      Int
  borrowDate  DateTime  @default(now())
  dueDate     DateTime?
  returnDate  DateTime?
  reviewDate  DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([inventoryId])
}

model Note {
  id     String   @id @default(cuid())
  userId String
  bookId String
  body   String
  date   DateTime @default(now())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book   Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([bookId])
}
